import GimmeError from '../models/GimmeError';

/**
 * Generates a random credit card number.
 * @param {*} opts
 */
const gimmeCredit = (opts = {}) => {
  const digits = opts.digit || 15;
  const format = opts.format || false;
  let credit = randomNumber(digits);

  credit = credit
    .split('')
    .concat(getCheckSumNumber(credit))
    .join('');

  if (format) {
    credit = credit
      .split('')
      .map((char, idx) =>
        (idx + 1) % 4 === 0 && idx !== digits ? `${char} ` : char
      )
      .join('');
  }

  return credit;
};

/**
 * Generates the Luhn formula check digit value that matches the number
 * generated by the generateRandom() method. The Luhn formula is a simple
 * checksum formula used to validate a variety of identification numbers,
 * including credit cards, which is why we're using it here.
 * https://en.wikipedia.org/wiki/Luhn_algorithm
 *
 * @since 0.0.1
 * @param { String } numStr - the random number.
 * @return { String } Returns the check digit value.
 */
const getCheckSumNumber = numStr => {
  return (
    numStr
      .split('')
      .map((digit, idx) => (idx % 2 === 0 ? Number(digit) : digit * 2))
      .map(digit => (digit > 10 ? digit - 9 : digit))
      .reduce((digit, total) => digit + total) % 10
  );
};

/**
 * Generate a 15-digit random number.
 * @since 0.1.0
 * @param { Number } digits - The length of number to generate.
 * @return { String } The generated number.
 */
const randomNumber = digits => {
  let number = 0;
  while (number < Math.pow(10, digits - 1)) {
    number = Math.floor(Math.random() * Math.pow(10, digits));
  }
  return number.toString();
};

export default {
  credit: opts => gimmeCredit(opts)
};

// /**
//    *
//    * @param {*} opts
//    */
//   validateOptions(opts) {
//     if (opts && opts instanceof Object) {
//       for (let option in opts) {
//         option === 'formatted' ? (this._formatted = opts[option]) : null;
//       }
//     } else {
//       throw GimmeError(`Invalid parameter.  ${opts} `);
//     }
//   }
